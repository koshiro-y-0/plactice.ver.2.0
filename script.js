class ChatBotGame {
    constructor() {
        this.userName = '';
        this.currentStep = 'greeting';
        this.userVictoryCount = 0;
        this.botVictoryCount = 0;
        this.currentGame = 0;
        this.gameResults = [];
        
        // „Éù„Ç±„É¢„É≥„Éá„Éº„Çø
        this.pokemonList = {
            "„É™„Ç∂„Éº„Éâ„É≥": { name: "„É™„Ç∂„Éº„Éâ„É≥", maxHp: 110, currentHp: 110, attack: 30, defense: 10, skillName: "„Åã„Åà„Çì„Åª„ÅÜ„Åó„ÇÉ", skillEffect: "Ê¨°„ÅÆÊîªÊíÉ„ÅÆ„ÉÄ„É°„Éº„Ç∏„Åå2ÂÄç„Å´„Å™„Çã„ÄÇ" },
            "„Ç´„É°„ÉÉ„ÇØ„Çπ": { name: "„Ç´„É°„ÉÉ„ÇØ„Çπ", maxHp: 100, currentHp: 100, attack: 20, defense: 25, skillName: "„Éè„Ç§„Éâ„É≠„Éù„É≥„Éó", skillEffect: "Áõ∏Êâã„Å´20„ÅÆÂõ∫ÂÆö„ÉÄ„É°„Éº„Ç∏„Çí‰∏é„Åà„Çã„ÄÇ" },
            "„Éï„Ç∑„ÇÆ„Éê„Éä": { name: "„Éï„Ç∑„ÇÆ„Éê„Éä", maxHp: 115, currentHp: 115, attack: 22, defense: 20, skillName: "„Åæ„ÇÇ„Çã", skillEffect: "Áõ∏Êâã„ÅÆÊ¨°„ÅÆÊîªÊíÉ„ÉÄ„É°„Éº„Ç∏„ÇíÂçäÊ∏õ„Åô„Çã„ÄÇ" },
            "„Éî„Ç´„ÉÅ„É•„Ç¶": { name: "„Éî„Ç´„ÉÅ„É•„Ç¶", maxHp: 70, currentHp: 70, attack: 35, defense: 8, skillName: "10‰∏á„Éú„É´„Éà", skillEffect: "Ê¨°„ÅÆÊîªÊíÉ„ÅåÂøÖ„Åö„ÇØ„É™„ÉÜ„Ç£„Ç´„É´„Éí„ÉÉ„ÉàÔºà„ÉÄ„É°„Éº„Ç∏1.5ÂÄçÔºâ„Å´„Å™„Çã„ÄÇ" },
            "„É´„Ç´„É™„Ç™": { name: "„É´„Ç´„É™„Ç™", maxHp: 95, currentHp: 95, attack: 28, defense: 15, skillName: "„Åã„Å™„Åó„Å∞„Çä", skillEffect: "Áõ∏Êâã„Çí1„Çø„Éº„É≥Ë°åÂãï‰∏çËÉΩ„Å´„Åô„Çã„ÄÇ" }
        };
        
        this.initializeElements();
        this.bindEvents();
        this.start();
    }
    
    initializeElements() {
        // ÁîªÈù¢ÂÖ®‰Ωì‰ºöË©±„Éì„É•„ÉºË¶ÅÁ¥†
        this.speechBubble = document.getElementById('speechBubble');
        this.userInput = document.getElementById('userInput');
        this.sendButton = document.getElementById('sendButton');
        this.quickActions = document.getElementById('quickActions');
        this.gameModal = document.getElementById('gameModal');
        // „Ç™„Çª„É≠Áî®Ë¶ÅÁ¥†
        this.othelloModal = document.getElementById('othelloModal');
        this.othelloBoard = document.getElementById('othelloBoard');
        this.fxLayer = document.getElementById('fxLayer');
    }
    
    // „ÇØ„Ç§„ÉÉ„ÇØ„Ç¢„ÇØ„Ç∑„Éß„É≥ÔºàÈÅ∏Êäû„Éú„Çø„É≥Ôºâ„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
    setQuickActions(buttonConfigs) {
        this.quickActions.innerHTML = '';
        buttonConfigs.forEach(cfg => {
            const btn = document.createElement('button');
            btn.className = 'quick-btn';
            btn.textContent = cfg.label;
            btn.addEventListener('click', () => cfg.onClick());
            this.quickActions.appendChild(btn);
        });
    }

    clearQuickActions() {
        this.quickActions.innerHTML = '';
    }

    // ========= „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÔºàFXÔºâ„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£ =========
    createFxElement(className, lifetimeMs = 900) {
        const el = document.createElement('div');
        el.className = className;
        this.fxLayer.appendChild(el);
        setTimeout(() => {
            if (el && el.parentNode) el.parentNode.removeChild(el);
        }, lifetimeMs);
        return el;
    }

    showBurst() {
        this.createFxElement('burst', 700);
    }

    showSlash() {
        this.createFxElement('slash', 600);
    }

    showShield() {
        this.createFxElement('shield', 900);
    }

    showSparks(count = 6) {
        for (let i = 0; i < count; i++) {
            const spark = this.createFxElement('spark', 800);
            const angle = Math.random() * Math.PI * 2;
            const radius = 80 + Math.random() * 60;
            const dx = Math.cos(angle) * radius;
            const dy = Math.sin(angle) * radius;
            spark.style.setProperty('--dx', `${dx}px`);
            spark.style.setProperty('--dy', `${dy}px`);
        }
    }

    revealCard(nextCard, effect = 'none') {
        // „Ç´„Éº„Éâ„Éï„É™„ÉÉ„ÉóÊºîÂá∫Ôºà? ‚Üí Êï∞Â≠óÔºâ
        const card = document.createElement('div');
        card.className = 'card-flip';
        const inner = document.createElement('div');
        inner.className = 'card-flip-inner';
        const front = document.createElement('div');
        front.className = 'card-face card-front';
        front.textContent = '?';
        const back = document.createElement('div');
        back.className = 'card-face card-back';
        back.textContent = String(nextCard);
        inner.appendChild(front);
        inner.appendChild(back);
        card.appendChild(inner);
        this.fxLayer.appendChild(card);
        setTimeout(() => {
            if (card && card.parentNode) card.parentNode.removeChild(card);
        }, 800);

        // ÁµêÊûú„Å´Âøú„Åò„ÅüËøΩÂä†„Ç®„Éï„Çß„ÇØ„Éà
        setTimeout(() => {
            if (effect === 'correct') this.showBurst();
            else if (effect === 'wrong') this.showSlash();
            else if (effect === 'draw') this.showShield();
        }, 620);
    }

    bindEvents() {
        this.sendButton.addEventListener('click', () => this.handleUserInput());
        this.userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.handleUserInput();
        });
        
        // „Ç≤„Éº„É†ÈÅ∏Êäû„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„Éà
        document.querySelectorAll('.game-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.selectGame(parseInt(e.target.dataset.game));
            });
        });
        
        // „Ç™„Çª„É≠„ÅØ„Çª„É´„ÇØ„É™„ÉÉ„ÇØ„ÅßÊìç‰Ωú„Åô„Çã„Åü„ÇÅ„ÄÅÈùôÁöÑ„Ç§„Éô„É≥„Éà„ÅØ‰∏çË¶Å
    }
    
    start() {
        this.addBotMessage("Âàù„ÇÅ„Åæ„Åó„Å¶„ÄÅÁßÅ„ÅÆÂêçÂâç„ÅØ„ÉÅ„É£„ÉÉ„Éà„Éú„ÉÉ„Éàü§ñ„Åß„ÅôÔºÅÔºÅÔºÅ");
        this.addBotMessage("„ÅÇ„Å™„Åü„ÅÆÂêçÂâç„ÅØÔºü");
        this.enableInput();
    }
    
    addBotMessage(message) {
        this.speechBubble.textContent = message;
    }
    
    addUserMessage(message) {
        // Âêπ„ÅçÂá∫„Åó„Å´„É¶„Éº„Ç∂„Éº„ÅÆÂÖ•Âäõ„Çí‰∏ÄÁû¨Ë°®Á§∫„Åó„Å¶„Åã„Çâ„Éú„ÉÉ„ÉàÂøúÁ≠î„Å´ÂàáÊõø„Åà„Çã„Çà„Çä„ÄÅ
        // ÁèæÂú®„ÅØ„É¶„Éº„Ç∂„ÉºÂÖ•Âäõ„ÅØ„É≠„Ç∞Ë°®Á§∫„Åõ„Åö„Éï„É≠„Éº„ÇíÈÄ≤„ÇÅ„ÇãÔºàË¶ã„ÅüÁõÆ„ÇíÁ∞°ÊΩî„Å´Ôºâ
        // ÂøÖË¶Å„Å™„Çâ„Åì„Åì„ÅßÁü≠„ÅÑ„Éà„Éº„Çπ„ÉàË°®Á§∫Á≠â„Å´Â∑Æ„ÅóÊõø„ÅàÂèØËÉΩ
        this.speechBubble.textContent = message;
    }
    
    addSystemMessage(message) {
        this.speechBubble.textContent = message;
    }
    
    enableInput() {
        this.userInput.disabled = false;
        this.sendButton.disabled = false;
        this.userInput.focus();
    }
    
    disableInput() {
        this.userInput.disabled = true;
        this.sendButton.disabled = true;
    }
    
    handleUserInput() {
        const input = this.userInput.value.trim();
        if (!input) return;
        
        this.addUserMessage(input);
        this.userInput.value = '';
        this.disableInput();
        
        setTimeout(() => {
            this.processInput(input);
        }, 500);
    }
    
    processInput(input) {
        switch (this.currentStep) {
            case 'greeting':
                this.handleGreeting(input);
                break;
            case 'weather':
                this.handleWeather(input);
                break;
            case 'game_preparation':
                this.handleGamePreparation(input);
                break;
            case 'game_selection':
                this.handleGameSelection(input);
                break;
            case 'janken_input':
                this.handleJankenInput(input);
                break;
            case 'highlow_preparation':
                this.handleHighLowPreparation(input);
                break;
            case 'highlow_input':
                this.handleHighLowInput(input);
                break;
        }
    }
    
    handleGreeting(input) {
        this.userName = input;
        const hour = new Date().getHours();
        let greeting = '';
        
        if (0 <= hour && hour <= 4) {
            greeting = `„Åì„Çì„Å∞„Çì„Çè üò¥ ${this.userName}„Åï„Çì`;
        } else if (5 <= hour && hour <= 11) {
            greeting = `„Åä„ÅØ„Çà„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô ü•± ${this.userName}„Åï„Çì`;
        } else if (11 < hour && hour <= 18) {
            greeting = `„Åì„Çì„Å´„Å°„ÅØ ü§ó ${this.userName}„Åï„Çì`;
        } else {
            greeting = `„Åì„Çì„Å∞„Çì„Çè üò¥ ${this.userName}„Åï„Çì`;
        }
        
        this.addBotMessage(greeting);
        this.addBotMessage(`${this.userName}„Åï„ÇìÔºÅÊòéÊó•„ÅÆÂ§©Ê∞ó„ÅØ„ÇÇ„ÅÜÁ¢∫Ë™ç„Åó„Åæ„Åó„Åü„ÅãÔºü`);
        this.addBotMessage("‰∏ã„ÅÆ„Éú„Çø„É≥„Åã„ÇâÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ");
        this.currentStep = 'weather';
        this.disableInput();
        this.setQuickActions([
            { label: '1: Á¢∫Ë™çÊ∏à„Åø', onClick: () => { this.clearQuickActions(); this.handleWeather('1'); } },
            { label: '2: „Åæ„Å†Á¢∫Ë™ç„Åó„Å¶„ÅÑ„Å™„ÅÑ', onClick: () => { this.clearQuickActions(); this.handleWeather('2'); } }
        ]);
    }
    
    handleWeather(input) {
        if (input === '1') {
            this.addBotMessage("Á¥†Êô¥„Çâ„Åó„ÅÑÔºÅ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ");
            this.startGamePreparation();
        } else if (input === '2') {
            this.addBotMessage("ÊòéÊó•„ÅÆÂåó‰πùÂ∑û„ÅÆÂ§©Ê∞ó„Çí„ÅäÁü•„Çâ„Åõ„Åó„Åæ„Åô„ÄÇ");
            this.showWeather();
        } else {
            this.addBotMessage("„Äå1„Äç„Å®„Äå2„Äç‰ª•Â§ñ„ÅØÂÖ•Âäõ„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ");
            // ÂÖ•Âäõ„ÅØ‰Ωø„Çè„Å™„ÅÑ„Åü„ÇÅ„ÄÅ„Éú„Çø„É≥„ÇíÂÜçË°®Á§∫
            this.disableInput();
            this.setQuickActions([
                { label: '1: Á¢∫Ë™çÊ∏à„Åø', onClick: () => { this.clearQuickActions(); this.handleWeather('1'); } },
                { label: '2: „Åæ„Å†Á¢∫Ë™ç„Åó„Å¶„ÅÑ„Å™„ÅÑ', onClick: () => { this.clearQuickActions(); this.handleWeather('2'); } }
            ]);
        }
    }
    
    showWeather() {
        // Â§©Ê∞ó‰∫àÂ†±„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÔºàÂÆüÈöõ„ÅÆAPI„ÅØ‰ΩøÁî®„Åó„Å™„ÅÑÔºâ
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        const month = tomorrow.getMonth() + 1;
        const day = tomorrow.getDate();
        
        this.addBotMessage(`‚ú® ${month}Êúà${day}Êó• ÊòéÊó•„ÅÆÂåó‰πùÂ∑ûÂ∏Ç„ÅÆÂ§©Ê∞ó‰∫àÂ†± ‚ú®`);
        this.addBotMessage("--- Êúù üåÖ „ÅÆ‰∫àÂ†± ---");
        this.addBotMessage(" üå°Ô∏è  Âπ≥ÂùáÊ∞óÊ∏©: 18.5¬∞C (ÊúÄ‰Ωé: 15.2¬∞C, ÊúÄÈ´ò: 22.1¬∞C)");
        this.addBotMessage(" üíß  Âπ≥ÂùáÊπøÂ∫¶: 65.3%");
        this.addBotMessage(" ‚òÅÔ∏è  Â§©Ê∞ó: Êô¥„Çå");
        
        this.addBotMessage("--- Êòº ‚òÄÔ∏è „ÅÆ‰∫àÂ†± ---");
        this.addBotMessage(" üå°Ô∏è  Âπ≥ÂùáÊ∞óÊ∏©: 22.8¬∞C (ÊúÄ‰Ωé: 20.1¬∞C, ÊúÄÈ´ò: 25.5¬∞C)");
        this.addBotMessage(" üíß  Âπ≥ÂùáÊπøÂ∫¶: 58.7%");
        this.addBotMessage(" ‚òÅÔ∏è  Â§©Ê∞ó: Êô¥„ÇåÊôÇ„ÄÖÊõá„Çä");
        
        this.addBotMessage("--- Â§ú üåô „ÅÆ‰∫àÂ†± ---");
        this.addBotMessage(" üå°Ô∏è  Âπ≥ÂùáÊ∞óÊ∏©: 16.2¬∞C (ÊúÄ‰Ωé: 13.8¬∞C, ÊúÄÈ´ò: 18.9¬∞C)");
        this.addBotMessage(" üíß  Âπ≥ÂùáÊπøÂ∫¶: 72.1%");
        this.addBotMessage(" ‚òÅÔ∏è  Â§©Ê∞ó: Êõá„Çä");
        
        this.addBotMessage("--- ÊòéÊó•ÂÖ®‰Ωì„ÅÆÊ∞óÊ∏© ---");
        this.addBotMessage(" ‚¨áÔ∏è  ÊòéÊó•„ÅÆÊúÄ‰ΩéÊ∞óÊ∏©: 13.8¬∞C");
        this.addBotMessage(" ‚¨ÜÔ∏è  ÊòéÊó•„ÅÆÊúÄÈ´òÊ∞óÊ∏©: 25.5¬∞C");
        
        setTimeout(() => {
            this.startGamePreparation();
        }, 1000);
    }
    
    startGamePreparation() {
        this.addSystemMessage("--- „Ç≤„Éº„É†ÈñãÂßã„ÅÆÊ∫ñÂÇô ---");
        this.addBotMessage("Ê¨°„ÅØ„ÅÑ„Çà„ÅÑ„Çà„Ç≤„Éº„É†„ÅåÂßã„Åæ„Çä„Åæ„Åô");
        this.addBotMessage("Ê∫ñÂÇôOK„Å™„Çâ„Éú„Çø„É≥„ÅÆ„Äé„ÅØ„ÅÑ„Äè„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ");
        this.currentStep = 'game_preparation';
        this.disableInput();
        this.setQuickActions([
            { label: '„ÅØ„ÅÑ', onClick: () => { this.clearQuickActions(); this.handleGamePreparation('„ÅØ„ÅÑ'); } },
            { label: '„Åæ„Å†', onClick: () => { this.handleGamePreparation('„Åæ„Å†'); } }
        ]);
    }
    
    handleGamePreparation(input) {
        if (input === '„ÅØ„ÅÑ') {
            this.addBotMessage("üëç Ê∫ñÂÇôOK„Åß„Åô„Å≠ÔºÅ„Ç≤„Éº„É†„ÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜÔºÅ");
            this.startGames();
        } else {
            this.addBotMessage(`„ÇÜ„Å£„Åè„Çä„Åß„ÅÑ„ÅÑ„Åß„Åô„Çà„ÄÇ${this.userName}„Åï„Çì„ÅÆ„Éö„Éº„Çπ„ÅßÂ§ß‰∏àÂ§´„Åß„Åô„ÄÇ`);
            // „Éú„Çø„É≥„ÅØ„Åù„ÅÆ„Åæ„ÅæË°®Á§∫„Åó„Å¶„Åä„Åè
        }
    }
    
    startGames() {
        this.addBotMessage("„Åì„Çå„Åã„Çâ3Âõû„ÄÅÁßÅ„Å®„Ç≤„Éº„É†„Çí„Åó„Åæ„Åô„ÄÇ„É´„Éº„É´„ÅØ3ÂõûÂãùË≤†„Åó„Å¶ÂãùÂà©Êï∞„ÅåÂ§ö„ÅÑÊñπ„ÅåÂãù„Å°„Åß„Åô");
        this.addBotMessage("Âêå„Åò„Ç≤„Éº„É†„Çí3ÂõûÈÅ∏Êäû„Åô„Çã„Åì„Å®„ÇÇÂèØËÉΩ„Åß„ÅôÔºÅÔºÅ");
        this.addBotMessage(`${this.userName}„Åï„Çì„ÅÆÂ•Ω„Åç„Å™„Ç≤„Éº„É†„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ`);
        // Áõ¥Êé•„É¢„Éº„ÉÄ„É´„ÇíË°®Á§∫„Åó„Å¶ÈÅ∏Êäû„Åó„Å¶„ÇÇ„Çâ„ÅÜ
        this.gameModal.style.display = 'block';
    }
    
    handleGameSelection(input) {
        const gameNumber = parseInt(input);
        if (gameNumber >= 1 && gameNumber <= 3) {
            this.currentGame = gameNumber;
            this.gameModal.style.display = 'block';
        } else {
            this.addBotMessage("‚ö†Ô∏è ÂÖ•ÂäõÂÄ§„ÅåÈñìÈÅï„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇ1, 2, 3„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅÆÊï∞Â≠ó„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
            this.enableInput();
        }
    }
    
    selectGame(gameNumber) {
        this.gameModal.style.display = 'none';
        this.currentGame = gameNumber;
        
        switch (gameNumber) {
            case 1:
                this.startJanken();
                break;
            case 2:
                this.startHighLow();
                break;
            case 3:
                this.startOthello();
                break;
        }
    }
    
    startJanken() {
        this.addBotMessage("--- „Åò„ÇÉ„Çì„Åë„Çì„ÅåÈÅ∏„Å∞„Çå„Åæ„Åó„Åü ---");
        this.addBotMessage("„É´„Éº„É´„ÇíË™¨Êòé„Åó„Åæ„Åô„ÄÇ‰ªäÂõû„ÅÆ„Åò„ÇÉ„Çì„Åë„Çì„ÅØ3ÂõûÂãùË≤†„Åß„ÅôÔºà„ÅÇ„ÅÑ„Åì„ÇíÈô§„ÅèÔºâ");
        this.addBotMessage(`ÊúÄÂàù„Å´Êâã„ÇíÂÖ•Âäõ„Åó„Å¶„ÄÅ${this.userName}„Åï„Çì„Åã„ÇâÊâã„ÇíÂá∫„Åó„Åæ„Åô„ÄÇ`);
        this.addBotMessage("„Çè„Åü„Åó„ÅØ„É©„É≥„ÉÄ„É†„Å´Ê±∫„ÇÅ„Çã„ÅÆ„Åß‰∏çÊ≠£„ÅØ„Å™„ÅÑ„ÅÆ„ÅßÂÆâÂøÉ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
        this.addBotMessage("Âá∫„ÅôÊâã„ÅØ‰∏ã„ÅÆ„Éú„Çø„É≥„Åã„Çâ„Äå„Ç∞„Éº„Äç„Äå„ÉÅ„Éß„Ç≠„Äç„Äå„Éë„Éº„Äç„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ");
        this.addBotMessage("ÂÖà„Å´2ÂõûÂãù„Å£„ÅüÊñπ„ÅåÂãùÂà©„Åß„Åô„ÄÇ");
        
        this.jankenData = {
            userPoints: 0,
            botPoints: 0,
            round: 1
        };
        
        this.currentStep = 'janken_input';
        this.disableInput();
        this.showJankenButtons();
    }
    
    showJankenButtons() {
        this.setQuickActions([
            { label: '„Ç∞„Éº', onClick: () => { this.clearQuickActions(); this.handleJankenInput('„Ç∞„Éº'); } },
            { label: '„ÉÅ„Éß„Ç≠', onClick: () => { this.clearQuickActions(); this.handleJankenInput('„ÉÅ„Éß„Ç≠'); } },
            { label: '„Éë„Éº', onClick: () => { this.clearQuickActions(); this.handleJankenInput('„Éë„Éº'); } },
        ]);
    }

    // ========= „Ç™„Çª„É≠ =========
    startOthello() {
        this.addBotMessage("--- „Ç™„Çª„É≠„ÅåÈÅ∏„Å∞„Çå„Åæ„Åó„Åü ---");
        this.addBotMessage("„ÅÇ„Å™„Åü„ÅØ‚ö™ÔºàÁôΩÔºâ„ÄÅ„Çè„Åü„Åó„ÅØ‚ö´ÔºàÈªíÔºâ„Åß„Åô„ÄÇÊåü„Çì„ÅßË£èËøî„Åó„Åæ„Åô„ÄÇ");
        this.addBotMessage("„ÅÇ„Å™„Åü„ÅÆÁï™„Åã„ÇâÈñãÂßã„Åó„Åæ„Åô„ÄÇ");

        this.othello = {
            SIZE: 8,
            EMPTY: '.',
            WHITE: 'W', // user
            BLACK: 'B', // bot
            board: [],
            turn: 'W'
        };

        this.initOthelloBoard();
        this.renderOthelloBoard();
        this.othelloModal.style.display = 'block';
    }

    initOthelloBoard() {
        const N = this.othello.SIZE;
        const E = this.othello.EMPTY;
        this.othello.board = Array.from({ length: N }, () => Array.from({ length: N }, () => E));
        const mid = N / 2;
        this.othello.board[mid - 1][mid - 1] = this.othello.WHITE;
        this.othello.board[mid][mid] = this.othello.WHITE;
        this.othello.board[mid - 1][mid] = this.othello.BLACK;
        this.othello.board[mid][mid - 1] = this.othello.BLACK;
    }

    isOnBoard(x, y) {
        return 0 <= x && x < this.othello.SIZE && 0 <= y && y < this.othello.SIZE;
    }

    getValidMoves(board, color) {
        const opponent = color === this.othello.WHITE ? this.othello.BLACK : this.othello.WHITE;
        const dirs = [
            [-1, -1], [-1, 0], [-1, 1],
            [0, -1],           [0, 1],
            [1, -1], [1, 0], [1, 1]
        ];
        const moves = [];
        for (let x = 0; x < this.othello.SIZE; x++) {
            for (let y = 0; y < this.othello.SIZE; y++) {
                if (board[x][y] !== this.othello.EMPTY) continue;
                for (const [dx, dy] of dirs) {
                    let nx = x + dx, ny = y + dy;
                    let found = false;
                    while (this.isOnBoard(nx, ny) && board[nx][ny] === opponent) {
                        nx += dx; ny += dy; found = true;
                    }
                    if (found && this.isOnBoard(nx, ny) && board[nx][ny] === color) {
                        moves.push([x, y]);
                        break;
                    }
                }
            }
        }
        return moves;
    }

    applyMove(board, x, y, color) {
        const opponent = color === this.othello.WHITE ? this.othello.BLACK : this.othello.WHITE;
        const dirs = [
            [-1, -1], [-1, 0], [-1, 1],
            [0, -1],           [0, 1],
            [1, -1], [1, 0], [1, 1]
        ];
        board[x][y] = color;
        for (const [dx, dy] of dirs) {
            let nx = x + dx, ny = y + dy;
            const path = [];
            while (this.isOnBoard(nx, ny) && board[nx][ny] === opponent) {
                path.push([nx, ny]);
                nx += dx; ny += dy;
            }
            if (this.isOnBoard(nx, ny) && board[nx][ny] === color) {
                for (const [px, py] of path) {
                    board[px][py] = color;
                }
            }
        }
    }

    countPieces(board) {
        let w = 0, b = 0;
        for (const row of board) {
            for (const cell of row) {
                if (cell === this.othello.WHITE) w++;
                else if (cell === this.othello.BLACK) b++;
            }
        }
        return { w, b };
    }

    renderOthelloBoard() {
        const boardEl = this.othelloBoard;
        if (!boardEl) return;
        boardEl.innerHTML = '';

        const validMoves = this.getValidMoves(this.othello.board, this.othello.turn);
        const validSet = new Set(validMoves.map(([x, y]) => `${x},${y}`));

        for (let x = 0; x < this.othello.SIZE; x++) {
            for (let y = 0; y < this.othello.SIZE; y++) {
                const cell = document.createElement('div');
                cell.className = 'othello-cell';
                cell.dataset.x = String(x);
                cell.dataset.y = String(y);

                const vkey = `${x},${y}`;
                if (this.othello.turn === this.othello.WHITE && validSet.has(vkey)) {
                    cell.classList.add('valid');
                    cell.addEventListener('click', () => this.handleOthelloUserMove(x, y));
                }

                const piece = this.othello.board[x][y];
                if (piece === this.othello.WHITE || piece === this.othello.BLACK) {
                    const stone = document.createElement('div');
                    stone.className = `othello-piece ${piece === this.othello.WHITE ? 'white' : 'black'}`;
                    cell.appendChild(stone);
                }

                boardEl.appendChild(cell);
            }
        }

        // „Çø„Éº„É≥Ë°®Á§∫
        const { w, b } = this.countPieces(this.othello.board);
        this.addBotMessage(`‚ö™${w} - ‚ö´${b}ÔΩú${this.othello.turn === 'W' ? this.userName + '„Åï„Çì„ÅÆÁï™(‚ö™)' : '„Çè„Åü„Åó„ÅÆÁï™(‚ö´)'}`);

        // „É¶„Éº„Ç∂„Éº„Å´Êâã„Åå„Å™„ÅÑÂ†¥Âêà„ÅØËá™Âãï„Éë„Çπ
        if (this.othello.turn === this.othello.WHITE && validMoves.length === 0) {
            this.addBotMessage('‚ö™ Êâì„Å¶„ÇãÂ†¥ÊâÄ„Åå„Å™„ÅÑ„Åü„ÇÅ„Éë„ÇπÔºÅ');
            this.othello.turn = this.othello.BLACK;
            setTimeout(() => this.botOthelloMove(), 600);
        }
        // „Éú„ÉÉ„Éà„ÅÆ„Çø„Éº„É≥„Å´Âç≥ÊôÇÁßªË°å
        if (this.othello.turn === this.othello.BLACK) {
            setTimeout(() => this.botOthelloMove(), 600);
        }
    }

    handleOthelloUserMove(x, y) {
        const moves = this.getValidMoves(this.othello.board, this.othello.WHITE);
        if (!moves.some(([mx, my]) => mx === x && my === y)) return;
        this.applyMove(this.othello.board, x, y, this.othello.WHITE);
        this.othello.turn = this.othello.BLACK;
        this.renderOthelloBoard();
    }

    botOthelloMove() {
        const whiteMoves = this.getValidMoves(this.othello.board, this.othello.WHITE);
        const blackMoves = this.getValidMoves(this.othello.board, this.othello.BLACK);

        // ÁµÇÂ±ÄÂà§ÂÆö
        if (whiteMoves.length === 0 && blackMoves.length === 0) {
            this.finishOthello();
            return;
        }

        if (blackMoves.length === 0) {
            this.addBotMessage('‚ö´ Êâì„Å¶„ÇãÂ†¥ÊâÄ„Åå„Å™„ÅÑ„Åü„ÇÅ„Éë„ÇπÔºÅ');
            this.othello.turn = this.othello.WHITE;
            this.renderOthelloBoard();
            return;
        }

        const [x, y] = blackMoves[Math.floor(Math.random() * blackMoves.length)];
        this.addBotMessage(`ü§ñ „Çè„Åü„ÅóÔºà‚ö´Ôºâ„ÅØ ${x}, ${y} „Å´ÁΩÆ„Åç„Åæ„Åô„ÄÇ`);
        this.applyMove(this.othello.board, x, y, this.othello.BLACK);
        this.othello.turn = this.othello.WHITE;
        this.renderOthelloBoard();
    }

    finishOthello() {
        const { w, b } = this.countPieces(this.othello.board);
        this.addBotMessage(`ÁµêÊûú: ‚ö™${w} - ‚ö´${b}`);
        this.othelloModal.style.display = 'none';
        if (w > b) {
            this.addBotMessage(`${this.userName}„Åï„Çì„ÅÆÂãù„Å°ÔºÅüèÜ`);
            this.gameResults.push('user');
        } else if (b > w) {
            this.addBotMessage('„Çè„Åü„Åó„ÅÆÂãù„Å°ÔºÅü§ñ');
            this.gameResults.push('bot');
        } else {
            this.addBotMessage('Âºï„ÅçÂàÜ„ÅëÔºÅü§ù');
            this.gameResults.push('draw');
        }
        this.nextGame();
    }

    handleJankenInput(input) {
        const validChoices = ["„Ç∞„Éº", "„ÉÅ„Éß„Ç≠", "„Éë„Éº"];
        if (!validChoices.includes(input)) {
            this.addBotMessage("‚ö†Ô∏è „Äå„Ç∞„Éº„Äç„Äå„ÉÅ„Éß„Ç≠„Äç„Äå„Éë„Éº„Äç„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
            this.showJankenButtons();
            return;
        }
        
        const botChoice = validChoices[Math.floor(Math.random() * 3)];
        this.addBotMessage(`„Çè„Åü„Åó„ÅØ„Äå${botChoice}„Äç„ÇíÂá∫„Åó„Åæ„Åó„ÅüÔºÅ`);

        // „Åò„ÇÉ„Çì„Åë„ÇìÊºîÂá∫ÔºàÂãù„Å°:„Éê„Éº„Çπ„Éà„ÄÅË≤†„Åë:„Çπ„É©„ÉÉ„Ç∑„É•„ÄÅ„ÅÇ„ÅÑ„Åì:„Ç∑„Éº„É´„ÉâÔºâ
        
        if (input === botChoice) {
            this.addBotMessage("„ÅÇ„ÅÑ„Åì„Åß„ÅôÔºÅ„ÇÇ„ÅÜ‰∏ÄÂ∫¶ÔºÅ");
            this.showShield();
        } else if (
            (input === "„Ç∞„Éº" && botChoice === "„ÉÅ„Éß„Ç≠") ||
            (input === "„ÉÅ„Éß„Ç≠" && botChoice === "„Éë„Éº") ||
            (input === "„Éë„Éº" && botChoice === "„Ç∞„Éº")
        ) {
            this.addBotMessage(`${this.userName}„Åï„Çì„ÅÆÂãù„Å°ÔºÅüéâ`);
            this.jankenData.userPoints++;
            this.showBurst();
        } else {
            this.addBotMessage("„Çè„Åü„Åó„ÅÆÂãù„Å°ÔºÅü§ñ");
            this.jankenData.botPoints++;
            this.showSlash();
        }
        
        this.addBotMessage(`ÁèæÂú®„ÅÆÂæóÁÇπ: ${this.userName}„Åï„Çì ${this.jankenData.userPoints}ÁÇπ | „Çè„Åü„Åó ${this.jankenData.botPoints}ÁÇπ`);
        
        if (this.jankenData.userPoints >= 2 || this.jankenData.botPoints >= 2) {
            this.clearQuickActions();
            this.endJanken();
        } else {
            this.showJankenButtons();
        }
    }
    
    endJanken() {
        this.addBotMessage("--- „Åò„ÇÉ„Çì„Åë„ÇìÁµêÊûú ---");
        this.addBotMessage(`${this.userName}„Åï„Çì„ÅÆÊúÄÁµÇÂæóÁÇπÔºö${this.jankenData.userPoints}ÁÇπ`);
        this.addBotMessage(`„Çè„Åü„Åó„ÅÆÊúÄÁµÇÂæóÁÇπÔºö${this.jankenData.botPoints}ÁÇπ`);
        
        if (this.jankenData.userPoints > this.jankenData.botPoints) {
            this.addBotMessage(`${this.userName}„Åï„Çì„ÅÆ„Åò„ÇÉ„Çì„Åë„ÇìÂãùÂà©„Åß„ÅôÔºÅüèÜ`);
            this.gameResults.push("user");
        } else {
            this.addBotMessage("„Çè„Åü„Åó„ÅÆ„Åò„ÇÉ„Çì„Åë„ÇìÂãùÂà©„Åß„ÅôÔºÅü§ñ");
            this.gameResults.push("bot");
        }
        
        this.nextGame();
    }
    
    startHighLow() {
        this.addBotMessage("--- HIGH & LOW„ÅåÈÅ∏„Å∞„Çå„Åæ„Åó„Åü ---");
        this.addBotMessage("„É´„Éº„É´„ÇíË™¨Êòé„Åó„Åæ„Åô„ÄÇ‰ªäÂõû„Éó„É¨„Ç§„Åô„Çã HIGH & LOW „ÅØÊôÆÈÄö„ÅÆ„ÇÇ„ÅÆ„Å®„ÅØÂ∞ë„ÅóÈÅï„ÅÑ„Åæ„Åô");
        this.addBotMessage(`„Åæ„Åö„ÄÅÁßÅ„ÅØ„Éá„Ç£„Éº„É©„Éº„Åß„Åô„ÄÇ${this.userName}„Åï„Çì„ÅØÂÆ£Ë®ÄÂÅ¥„Åß„Åô„ÄÇ`);
        this.addBotMessage("„É´„Éº„É´ÔºëÔºö1 ~ 13„Åæ„Åß„ÅÆÊï∞Â≠ó„Åå„É©„É≥„ÉÄ„É†„Å´6ÊûöÈÅ∏„Å∞„Çå„Åæ„ÅôÔºàÈáçË§áÁÑ°„ÅóÔºâ„ÄÇÊúÄÂàù„ÅÆ„Ç´„Éº„Éâ„ÅåÂá∫„Åï„Çå„ÄÅÊÆã„Çä„ÅÆ5Êûö„ÅßÂãùË≤†„Åó„Åæ„Åô„ÄÇ„Çà„Å£„Å¶„ÄÅ5ÂõûÂÆ£Ë®Ä„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ");
        this.addBotMessage("„É´„Éº„É´ÔºíÔºöÊúÄÂàù„Å´1ÊûöÁõÆ„ÅÆ„Ç´„Éº„Éâ„ÅåÂ†¥„Å´Âá∫„Çã„ÅÆ„Åß„ÄÅÊ¨°„ÅÆ„Ç´„Éº„Éâ„Åå1ÊûöÁõÆ„ÅÆ„Ç´„Éº„Éâ„Çà„Çä„ÇÇÂ§ß„Åç„ÅÑ(HIGH)„ÅãÂ∞è„Åï„ÅÑ(LOW)„ÅãÂΩì„Å¶„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÁöÑ‰∏≠„Åß„Åç„Åü„Çâ1„Éù„Ç§„É≥„ÉàÁç≤Âæó„Åß„Åô„ÄÇÂ§ñ„Åó„ÅüÂ†¥Âêà„ÅØ„Éá„Ç£„Éº„É©„Éº„Å´ÂæóÁÇπ„ÅåÂÖ•„Çä„Åæ„Åô„ÄÇ");
        this.addBotMessage("„É´„Éº„É´ÔºìÔºöÂÆ£Ë®Ä„ÅØ‰∏ã„ÅÆ„Éú„Çø„É≥„Åã„Çâ HIGH(Â§ß„Åç„ÅÑ) „Åæ„Åü„ÅØ LOW(Â∞è„Åï„ÅÑ) „ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ");
        this.addBotMessage("„É´„Éº„É´ÔºîÔºöÊúÄÁµÇÁöÑ„Å´„Éù„Ç§„É≥„Éà„ÅÆÂ§ö„Åï„ÅßÂãùÊïó„ÇíÊ±∫„ÇÅ„Åæ„Åô„ÄÇ");
        this.addBotMessage("„Åù„Çå„Åß„ÅØ„ÄÅ„Ç≤„Éº„É†„ÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜÔºÅÔºÅ");
        this.addBotMessage("Ê∫ñÂÇô„Åå„Åß„Åç„Åü„Çâ„ÄéÈñãÂßã„Äè„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
        
        this.currentStep = 'highlow_preparation';
        this.disableInput();
        this.setQuickActions([
            { label: 'ÈñãÂßã', onClick: () => { this.clearQuickActions(); this.startHighLowGame(); } }
        ]);
    }
    
    handleHighLowPreparation(input) {
        if (input === 'Y') {
            this.startHighLowGame();
        } else {
            this.addBotMessage("„ÄåY„Äç‰ª•Â§ñ„ÅØÂÖ•Âäõ„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ");
            this.enableInput();
        }
    }
    
    startHighLowGame() {
        this.highLowData = {
            userPoint: 0,
            botPoint: 0,
            cards: this.generateRandomCards(6),
            currentCard: null,
            round: 1
        };
        
        this.highLowData.currentCard = this.highLowData.cards[0];
        this.addBotMessage(`ÊúÄÂàù„ÅÆ„Ç´„Éº„Éâ: ${this.highLowData.currentCard} üÉè`);
        this.currentStep = 'highlow_input';
        this.disableInput();
        this.showHighLowChoiceButtons();
    }
    
    generateRandomCards(count) {
        const cards = [];
        while (cards.length < count) {
            const card = Math.floor(Math.random() * 13) + 1;
            if (!cards.includes(card)) {
                cards.push(card);
            }
        }
        return cards;
    }
    
    handleHighLowInput(input) {
        if (input !== 'h' && input !== 'l') {
            this.addBotMessage("‚ö†Ô∏è „Äåh„Äç„Åæ„Åü„ÅØ„Äål„Äç„ÅÆ„ÅÑ„Åö„Çå„Åã„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
            this.showHighLowChoiceButtons();
            return;
        }
        
        const nextCard = this.highLowData.cards[this.highLowData.round];
        this.addBotMessage(`--- ${this.highLowData.round}ÂõûÊà¶ ---`);
        this.addBotMessage(`ÁèæÂú®„ÅÆ„Ç´„Éº„Éâ: ${this.highLowData.currentCard}`);
        // „Ç´„Éº„Éâ„Çí„ÇÅ„Åè„ÇãÊºîÂá∫
        this.revealCard(nextCard);
        this.addBotMessage(`Ê¨°„ÅÆ„Ç´„Éº„Éâ„ÅØ... ${nextCard} „Åß„Åó„ÅüÔºÅ`);
        
        let isCorrect = false;
        if (input === "h" && nextCard > this.highLowData.currentCard) {
            isCorrect = true;
        } else if (input === "l" && nextCard < this.highLowData.currentCard) {
            isCorrect = true;
        }
        
        if (nextCard === this.highLowData.currentCard) {
            this.addBotMessage("Âêå„ÅòÊï∞Â≠ó„Åß„Åó„ÅüÔºÅÂºï„ÅçÂàÜ„Åë„Åß„Åô„ÄÇ„Éù„Ç§„É≥„Éà„ÅØÂÖ•„Çä„Åæ„Åõ„Çì„ÄÇ");
            this.revealCard(nextCard, 'draw');
        } else if (isCorrect) {
            this.addBotMessage("üéâ Ê≠£Ëß£ÔºÅ„Éù„Ç§„É≥„Éà„Ç≤„ÉÉ„ÉàÔºÅÔºÅ");
            this.highLowData.userPoint++;
            this.showBurst();
        } else {
            this.addBotMessage("ÊÆãÂøµÔºÅ‰∏çÊ≠£Ëß£...");
            this.highLowData.botPoint++;
            this.showSlash();
        }
        
        this.addBotMessage(`ÁèæÂú®„ÅÆÂæóÁÇπ: ${this.userName}„Åï„Çì ${this.highLowData.userPoint}ÁÇπ | „Çè„Åü„Åó ${this.highLowData.botPoint}ÁÇπ`);
        this.highLowData.currentCard = nextCard;
        this.highLowData.round++;
        
        if (this.highLowData.round > 5) {
            this.clearQuickActions();
            this.endHighLow();
        } else {
            this.showHighLowChoiceButtons();
        }
    }
    
    endHighLow() {
        this.addBotMessage("--- HIGH & LOW ÁµêÊûú ---");
        this.addBotMessage(`${this.userName}„Åï„Çì„ÅÆÊúÄÁµÇÂæóÁÇπÔºö${this.highLowData.userPoint}ÁÇπ`);
        this.addBotMessage(`„Çè„Åü„Åó„ÅÆÊúÄÁµÇÂæóÁÇπÔºö${this.highLowData.botPoint}ÁÇπ`);
        
        if (this.highLowData.userPoint > this.highLowData.botPoint) {
            this.addBotMessage(`„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ${this.userName}„Åï„Çì„ÅÆHIGH & LOWÂãùÂà©„Åß„ÅôÔºÅüèÜ`);
            this.gameResults.push("user");
        } else if (this.highLowData.botPoint > this.highLowData.userPoint) {
            this.addBotMessage("ÊÆãÂøµ„Åß„Åó„Åü„ÄÇ„Çè„Åü„Åó„ÅÆHIGH & LOWÂãùÂà©„Åß„ÅôÔºÅü§ñ");
            this.gameResults.push("bot");
        } else {
            this.addBotMessage("Âºï„ÅçÂàÜ„Åë„Åß„Åó„ÅüÔºÅ");
            this.gameResults.push("draw");
        }
        
        this.nextGame();
    }
    
    startPokemonBattle() {
        this.addBotMessage("--- „Éù„Ç±„É¢„É≥„Éê„Éà„É´„ÅåÈÅ∏„Å∞„Çå„Åæ„Åó„Åü ---");
        this.addBotMessage("„Éù„Ç±„É¢„É≥„ÇíÈÅ∏„Çì„Åß„ÄÅÁßÅ„Å®„Éê„Éà„É´„Åó„Åæ„Åó„Çá„ÅÜÔºÅ");
        
        this.showPokemonSelection();
    }
    
    showPokemonSelection() {
        this.pokemonModal.style.display = 'block';
        const pokemonOptions = document.getElementById('pokemonOptions');
        pokemonOptions.innerHTML = '';
        
        Object.entries(this.pokemonList).forEach(([name, pokemon], index) => {
            const card = document.createElement('div');
            card.className = 'pokemon-card';
            card.innerHTML = `
                <h3>${pokemon.name}</h3>
                <p>HP: ${pokemon.maxHp}, ÊîªÊíÉÂäõ: ${pokemon.attack}, Èò≤Âæ°: ${pokemon.defense}</p>
                <p>„ÉØ„Ç∂: [${pokemon.skillName}] - ${pokemon.skillEffect}</p>
            `;
            card.addEventListener('click', () => this.selectPokemon(name));
            pokemonOptions.appendChild(card);
        });
    }
    
    selectPokemon(pokemonName) {
        this.pokemonModal.style.display = 'none';
        this.playerPokemon = { ...this.pokemonList[pokemonName] };
        
        // „Éú„ÉÉ„Éà„ÅÆ„Éù„Ç±„É¢„É≥„ÇíÈÅ∏ÊäûÔºà„Éó„É¨„Ç§„É§„Éº„Å®Áï∞„Å™„Çã„ÇÇ„ÅÆÔºâ
        const availablePokemon = Object.keys(this.pokemonList).filter(name => name !== pokemonName);
        const botPokemonName = availablePokemon[Math.floor(Math.random() * availablePokemon.length)];
        this.botPokemon = { ...this.pokemonList[botPokemonName] };
        
        this.addBotMessage(`${this.userName}„Åï„Çì„ÅØ [${this.playerPokemon.name}] „ÇíÈÅ∏„Å≥„Åæ„Åó„ÅüÔºÅüéâ`);
        this.addBotMessage(`„Éú„ÉÉ„Éà„ÅØ [${this.botPokemon.name}] „ÇíÂá∫„Åó„ÅüÔºÅü§ñ`);
        
        this.startBattle();
    }
    
    startBattle() {
        this.battleData = {
            turn: 1,
            playerFirst: Math.random() < 0.5
        };
        
        this.addBotMessage("--- „Éê„Éà„É´„Çπ„Çø„Éº„Éà‚öîÔ∏è ---");
        this.addBotMessage("---------------------------");
        
        if (this.battleData.playerFirst) {
            this.addBotMessage(`${this.userName}„Åï„Çì„ÅåÂÖàÊîª„Åß„ÅôÔºÅ`);
        } else {
            this.addBotMessage("„Çè„Åü„Åó„ÅåÂÖàÊîª„Åß„ÅôÔºÅ");
        }
        
        this.nextBattleTurn();
    }
    
    nextBattleTurn() {
        if (this.playerPokemon.currentHp <= 0 || this.botPokemon.currentHp <= 0) {
            this.endBattle();
            return;
        }
        
        this.addBotMessage(`=== „Çø„Éº„É≥ ${this.battleData.turn} ===`);
        this.addBotMessage(`${this.userName}„Åï„Çì„ÅÆ„Éù„Ç±„É¢„É≥: ${this.playerPokemon.name} HP: ${this.playerPokemon.currentHp}/${this.playerPokemon.maxHp}`);
        this.addBotMessage(`„Çè„Åü„Åó„ÅÆ„Éù„Ç±„É¢„É≥: ${this.botPokemon.name} HP: ${this.botPokemon.currentHp}/${this.botPokemon.maxHp}`);
        
        if (this.battleData.playerFirst) {
            this.playerTurn();
        } else {
            this.botTurn();
        }
    }
    
    playerTurn() {
        this.battleModal.style.display = 'block';
        const skillBtn = document.getElementById('skillBtn');
        if (this.playerPokemon.skillUsed) {
            skillBtn.textContent = "3: ÁâπÊÆä„ÉØ„Ç∂ (‰ΩøÁî®Ê∏à„Åø)";
            skillBtn.disabled = true;
        } else {
            skillBtn.textContent = `3: ÁâπÊÆä„ÉØ„Ç∂ [${this.playerPokemon.skillName}]`;
            skillBtn.disabled = false;
        }
    }
    
    handleBattleAction(action) {
        this.battleModal.style.display = 'none';
        
        switch (action) {
            case 'attack':
                this.playerAttack();
                break;
            case 'defend':
                this.playerDefend();
                break;
            case 'skill':
                this.playerUseSkill();
                break;
        }
        
        // „Éú„ÉÉ„Éà„ÅÆ„Çø„Éº„É≥
        setTimeout(() => {
            this.botTurn();
        }, 1000);
    }
    
    playerAttack() {
        const multiplier = this.playerPokemon.attackMultiplier || 1.0;
        const damage = Math.round(this.playerPokemon.attack * multiplier);
        this.botPokemon.currentHp -= Math.max(0, damage - this.botPokemon.defense / 2);
        if (this.botPokemon.currentHp < 0) this.botPokemon.currentHp = 0;
        
        this.addBotMessage(`[${this.playerPokemon.name}] „ÅÆÊîªÊíÉÔºÅ`);
        this.addBotMessage(`[${this.botPokemon.name}] „ÅØ ${damage} „ÅÆ„ÉÄ„É°„Éº„Ç∏„ÇíÂèó„Åë„ÅüÔºÅ`);
        this.addBotMessage(`ÊÆã„ÇäHP: ${this.botPokemon.currentHp}`);
        // ÊîªÊíÉÊºîÂá∫
        this.showSlash();
        this.showSparks(5);
    }
    
    playerDefend() {
        this.addBotMessage(`[${this.playerPokemon.name}] „ÅØË∫´„ÇíÂÆà„Å£„Å¶„ÅÑ„ÇãÔºÅ„Ç¨„Éº„Éâ„Ç¢„ÉÉ„ÉóÔºÅ‚¨ÜÔ∏è`);
        this.playerPokemon.isDefending = true;
        this.showShield();
    }
    
    playerUseSkill() {
        this.addBotMessage(`[${this.playerPokemon.name}] „ÅØ„ÉØ„Ç∂ [${this.playerPokemon.skillName}] „Çí‰ΩøÁî®„Åó„ÅüÔºÅ`);
        this.playerPokemon.skillUsed = true;
        
        switch (this.playerPokemon.skillName) {
            case "„Åã„Åà„Çì„Åª„ÅÜ„Åó„ÇÉ":
                this.playerPokemon.attackMultiplier = 2.0;
                this.addBotMessage(`[${this.playerPokemon.name}] „ÅÆÁÇé„ÅåÁáÉ„Åà‰∏ä„Åå„Å£„ÅüÔºÅüî•`);
                this.showBurst();
                break;
            case "„Éè„Ç§„Éâ„É≠„Éù„É≥„Éó":
                this.botPokemon.currentHp -= 20;
                this.addBotMessage(`[${this.botPokemon.name}] „Å´Ê∞¥„Åó„Å∂„Åç„ÅåË•≤„ÅÑ„Åã„Åã„ÇãÔºÅüíß`);
                this.showSparks(8);
                break;
            case "„Åæ„ÇÇ„Çã":
                this.playerPokemon.isGuarding = true;
                this.addBotMessage(`[${this.playerPokemon.name}] „ÅØË∫´„ÇíÂÆà„Å£„ÅüÔºÅÊ¨°„ÅÆÊîªÊíÉ„ÅØÂçäÊ∏õ„Å†ÔºÅüõ°Ô∏è`);
                this.showShield();
                break;
            case "10‰∏á„Éú„É´„Éà":
                this.playerPokemon.attackMultiplier = 1.5;
                this.addBotMessage(`[${this.playerPokemon.name}] „ÅÆÈõªÊ∞ó„ÅåËµ∞„ÇäÂá∫„ÅôÔºÅ‚ö°`);
                this.showSparks(12);
                break;
            case "„Åã„Å™„Åó„Å∞„Çä":
                this.botPokemon.isDisabled = true;
                this.addBotMessage(`[${this.botPokemon.name}] „ÅØ„Åã„Å™„Åó„Å∞„Çä„ÅßÂãï„Åë„Å™„Åè„Å™„Å£„ÅüÔºÅüòµ`);
                this.showSlash();
                break;
        }
    }
    
    botTurn() {
        if (this.botPokemon.isDisabled) {
            this.addBotMessage(`[${this.botPokemon.name}] „ÅØ„Åã„Å™„Åó„Å∞„Çä„ÅßÂãï„Åë„Å™„ÅÑÔºÅüòµ`);
            this.botPokemon.isDisabled = false;
        } else {
            const actions = ['attack', 'defend'];
            if (!this.botPokemon.skillUsed) actions.push('skill');
            
            const action = actions[Math.floor(Math.random() * actions.length)];
            
            switch (action) {
                case 'attack':
                    this.botAttack();
                    break;
                case 'defend':
                    this.botDefend();
                    break;
                case 'skill':
                    this.botUseSkill();
                    break;
            }
        }
        
        this.battleData.turn++;
        setTimeout(() => {
            this.nextBattleTurn();
        }, 1000);
    }
    
    botAttack() {
        const multiplier = this.botPokemon.attackMultiplier || 1.0;
        const damage = Math.round(this.botPokemon.attack * multiplier);
        let effectiveDamage = damage;
        
        if (this.playerPokemon.isDefending || this.playerPokemon.isGuarding) {
            this.addBotMessage(`${this.playerPokemon.name} „ÅØÈò≤Âæ°„Åó„Å¶„ÅÑ„ÇãÔºÅ„ÉÄ„É°„Éº„Ç∏„ÅåÂçäÊ∏õ„Åï„Çå„ÅüÔºÅ`);
            effectiveDamage = Math.floor(damage * 0.5);
            this.playerPokemon.isDefending = false;
            this.playerPokemon.isGuarding = false;
            this.showShield();
        }
        
        effectiveDamage = Math.max(0, effectiveDamage - this.playerPokemon.defense / 2);
        this.playerPokemon.currentHp -= effectiveDamage;
        if (this.playerPokemon.currentHp < 0) this.playerPokemon.currentHp = 0;
        
        this.addBotMessage(`[${this.botPokemon.name}] „ÅÆÊîªÊíÉÔºÅ`);
        this.addBotMessage(`${this.playerPokemon.name} „ÅØ ${effectiveDamage} „ÅÆ„ÉÄ„É°„Éº„Ç∏„ÇíÂèó„Åë„ÅüÔºÅ`);
        this.addBotMessage(`ÊÆã„ÇäHP: ${this.playerPokemon.currentHp}`);
        this.showSlash();
    }
    
    botDefend() {
        this.addBotMessage(`[${this.botPokemon.name}] „ÅØË∫´„ÇíÂÆà„Å£„Å¶„ÅÑ„ÇãÔºÅ„Ç¨„Éº„Éâ„Ç¢„ÉÉ„ÉóÔºÅ‚¨ÜÔ∏è`);
        this.botPokemon.isDefending = true;
        this.showShield();
    }
    
    botUseSkill() {
        this.addBotMessage(`[${this.botPokemon.name}] „ÅØ„ÉØ„Ç∂ [${this.botPokemon.skillName}] „Çí‰ΩøÁî®„Åó„ÅüÔºÅ`);
        this.botPokemon.skillUsed = true;
        
        switch (this.botPokemon.skillName) {
            case "„Åã„Åà„Çì„Åª„ÅÜ„Åó„ÇÉ":
                this.botPokemon.attackMultiplier = 2.0;
                this.addBotMessage(`[${this.botPokemon.name}] „ÅÆÁÇé„ÅåÁáÉ„Åà‰∏ä„Åå„Å£„ÅüÔºÅüî•`);
                this.showBurst();
                break;
            case "„Éè„Ç§„Éâ„É≠„Éù„É≥„Éó":
                this.playerPokemon.currentHp -= 20;
                this.addBotMessage(`[${this.playerPokemon.name}] „Å´Ê∞¥„Åó„Å∂„Åç„ÅåË•≤„ÅÑ„Åã„Åã„ÇãÔºÅüíß`);
                this.showSparks(8);
                break;
            case "„Åæ„ÇÇ„Çã":
                this.botPokemon.isGuarding = true;
                this.addBotMessage(`[${this.botPokemon.name}] „ÅØË∫´„ÇíÂÆà„Å£„ÅüÔºÅÊ¨°„ÅÆÊîªÊíÉ„ÅØÂçäÊ∏õ„Å†ÔºÅüõ°Ô∏è`);
                this.showShield();
                break;
            case "10‰∏á„Éú„É´„Éà":
                this.botPokemon.attackMultiplier = 1.5;
                this.addBotMessage(`[${this.botPokemon.name}] „ÅÆÈõªÊ∞ó„ÅåËµ∞„ÇäÂá∫„ÅôÔºÅ‚ö°`);
                this.showSparks(12);
                break;
            case "„Åã„Å™„Åó„Å∞„Çä":
                this.playerPokemon.isDisabled = true;
                this.addBotMessage(`[${this.playerPokemon.name}] „ÅØ„Åã„Å™„Åó„Å∞„Çä„ÅßÂãï„Åë„Å™„Åè„Å™„Å£„ÅüÔºÅüòµ`);
                this.showSlash();
                break;
        }
    }
    
    endBattle() {
        this.addBotMessage("--- „Éê„Éà„É´ÁµÇ‰∫ÜÔºÅ ---");
        this.addBotMessage("---------------------");
        
        if (this.playerPokemon.currentHp <= 0) {
            this.addBotMessage(`${this.userName}„Åï„Çì„ÅÆ [${this.playerPokemon.name}] „ÅØÂÄí„Çå„ÅüÔºÅüòµ`);
            this.addBotMessage(`„Çè„Åü„Åó„ÅÆ [${this.botPokemon.name}] „ÅÆÂãùÂà©ÔºÅüèÜ`);
            this.gameResults.push("bot");
        } else {
            this.addBotMessage(`„Çè„Åü„Åó„ÅÆ [${this.botPokemon.name}] „ÅØÂÄí„Çå„ÅüÔºÅüòµ`);
            this.addBotMessage(`${this.userName}„Åï„Çì„ÅÆ [${this.playerPokemon.name}] „ÅÆÂãùÂà©ÔºÅ„Åä„ÇÅ„Åß„Å®„ÅÜÔºÅüéâ`);
            this.gameResults.push("user");
        }
        
        this.nextGame();
    }
    
    // HIGH & LOW ÈÅ∏Êäû„Éú„Çø„É≥Ë°®Á§∫
    showHighLowChoiceButtons() {
        this.setQuickActions([
            { label: 'HIGH', onClick: () => { this.clearQuickActions(); this.handleHighLowInput('h'); } },
            { label: 'LOW', onClick: () => { this.clearQuickActions(); this.handleHighLowInput('l'); } }
        ]);
    }

    nextGame() {
        this.currentGame++;
        
        if (this.currentGame <= 3) {
            this.addBotMessage(`--- Á¨¨${this.currentGame}ÂõûÊà¶ ---`);
            this.addBotMessage(`${this.userName}„Åï„Çì„ÄÅ„Ç≤„Éº„É†„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ`);
            // ÂÖ•Âäõ„Åß„ÅØ„Å™„Åè„É¢„Éº„ÉÄ„É´„ÅßÈÅ∏Êäû
            this.gameModal.style.display = 'block';
        } else {
            this.showFinalResults();
        }
    }
    
    showFinalResults() {
        this.userVictoryCount = this.gameResults.filter(result => result === 'user').length;
        this.botVictoryCount = this.gameResults.filter(result => result === 'bot').length;
        
        this.addBotMessage("--- „Ç≤„Éº„É†ÁµÇ‰∫ÜÔºÅÁµêÊûúÁô∫Ë°® ---");
        this.addBotMessage(`${this.userName}„Åï„Çì ${this.userVictoryCount}Âãù : „Çè„Åü„Åó ${this.botVictoryCount}Âãù`);
        
        if (this.userVictoryCount > this.botVictoryCount) {
            this.addBotMessage(`„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅüéä ${this.userName}„Åï„Çì„ÅÆÂãùÂà©„Åß„ÅôÔºÅÔºÅ`);
        } else if (this.botVictoryCount > this.userVictoryCount) {
            this.addBotMessage("ÊÆãÂøµ„Åß„Åó„ÅüÔºÅ‰ªäÂõû„ÅØ„Çè„Åü„Åó„ÅÆÂãù„Å°„Åß„Åó„ÅüÔºÅü§ñ");
        } else {
            this.addBotMessage("Âºï„ÅçÂàÜ„Åë„Åß„Åô„Å≠ÔºÅ„Å©„Å°„Çâ„ÇÇÁ¥†Êô¥„Çâ„Åó„ÅÑÊà¶„ÅÑ„Åß„Åó„ÅüÔºÅüëè");
        }
        
        this.addBotMessage("‰ªäÊó•„ÅÆ„Ç≤„Éº„É†„ÅØ„Åì„Åì„Åæ„Åß„Åß„Åô„ÄÇ„ÅÑ„Åã„Åå„Åß„Åó„Åü„ÅãÔºü");
        this.addBotMessage("„Åæ„ÅüÈÅä„Çì„Åß„Åè„Çå„Çã„Å®Â¨â„Åó„ÅÑ„Åß„Åô„ÄÇ„Åù„Çå„Åß„ÅØ„Åæ„Åü„Å≠ÔºÅüëã");
    }
}

// „Ç≤„Éº„É†ÈñãÂßã
document.addEventListener('DOMContentLoaded', () => {
    new ChatBotGame();
}); 